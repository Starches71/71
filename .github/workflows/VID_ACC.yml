
name: Merge, deduplicate, and sort VID files

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC

jobs:
  merge-vid-files:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Confirm checkout success
      run: echo "✅ Repo checked out"

    - name: Find all Vid*.txt files
      run: |
        echo "Searching for Vid*.txt files..."
        ALL_VID_FILES=$(ls Vid*.txt 2>/dev/null || echo "")
        if [ -z "$ALL_VID_FILES" ]; then
          echo "❌ No Vid*.txt files found!"
          exit 1
        else
          echo "✅ Found files:"
          echo "$ALL_VID_FILES"
          echo
        fi

    - name: Separate shorts and longs
      run: |
        SHORT_FILES=""
        LONG_FILES=""
        for f in Vid*.txt; do
          fname=$(echo "$f" | tr '[:upper:]' '[:lower:]')
          if [[ "$fname" == *short* ]]; then
            echo "Short video file: $f"
            SHORT_FILES="$SHORT_FILES $f"
          elif [[ "$fname" == *long* ]]; then
            echo "Long video file: $f"
            LONG_FILES="$LONG_FILES $f"
          else
            echo "Skipping file (not short or long): $f"
          fi
        done
        echo "SHORT_FILES=$SHORT_FILES" >> $GITHUB_ENV
        echo "LONG_FILES=$LONG_FILES" >> $GITHUB_ENV

    - name: Merge, deduplicate, and sort shorts
      run: |
        if [ -z "$SHORT_FILES" ]; then
          echo "No short files to merge"
          exit 0
        fi

        echo "Processing SHORT files..."
        cat $SHORT_FILES > _raw_short.txt

        awk '
          BEGIN { RS=""; ORS="\n\n" }
          {
            mark = substr($0, 1, 1)
            content = substr($0, 3)
            match(content, /^[0-9,]+ views \|/, m)
            if (m[0]) {
              views_str = substr(m[0], 1, length(m[0]) - 8)
              gsub(",", "", views_str)
              views = views_str + 0
            } else {
              views = 0
            }
            key = content
            if (!(key in seen)) {
              seen[key] = 1
              data[views mark] = mark " " content
              order[++count] = views mark
            }
          }
          function compare(a, b) {
            va = substr(a, 1, index(a, substr(data[a],1,1))-1) + 0
            vb = substr(b, 1, index(b, substr(data[b],1,1))-1) + 0
            return (va < vb)
          }
          END {
            n = asort(order, sorted, "compare")
            for (i = 1; i <= n; i++) {
              print data[sorted[i]]
            }
          }
        ' _raw_short.txt > VID_SHORT_MERGED.txt

        echo "✅ Shorts merged and sorted"
        head -n 10 VID_SHORT_MERGED.txt || echo "(file empty)"

    - name: Merge, deduplicate, and sort longs
      run: |
        if [ -z "$LONG_FILES" ]; then
          echo "No long files to merge"
          exit 0
        fi

        echo "Processing LONG files..."
        cat $LONG_FILES > _raw_long.txt

        awk '
          BEGIN { RS=""; ORS="\n\n" }
          {
            mark = substr($0, 1, 1)
            content = substr($0, 3)
            match(content, /^[0-9,]+ views \|/, m)
            if (m[0]) {
              views_str = substr(m[0], 1, length(m[0]) - 8)
              gsub(",", "", views_str)
              views = views_str + 0
            } else {
              views = 0
            }
            key = content
            if (!(key in seen)) {
              seen[key] = 1
              data[views mark] = mark " " content
              order[++count] = views mark
            }
          }
          function compare(a, b) {
            va = substr(a, 1, index(a, substr(data[a],1,1))-1) + 0
            vb = substr(b, 1, index(b, substr(data[b],1,1))-1) + 0
            return (va < vb)
          }
          END {
            n = asort(order, sorted, "compare")
            for (i = 1; i <= n; i++) {
              print data[sorted[i]]
            }
          }
        ' _raw_long.txt > VID_LONG_MERGED.txt

        echo "✅ Longs merged and sorted"
        head -n 10 VID_LONG_MERGED.txt || echo "(file empty)"

    - name: Configure git user
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"

    - name: Commit and push changes with rebase
      run: |
        git add VID_SHORT_MERGED.txt VID_LONG_MERGED.txt
        if git diff --cached --quiet; then
          echo "No changes to commit"
          exit 0
        else
          git commit -m "Auto-merge & sort VID files - $(date -u)"
          git pull --rebase origin main
          git push origin main
          echo "✅ Changes committed and pushed"
        fi
