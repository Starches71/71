
name: Download Videos via Tor

on:
  push:
    branches:
      - main  # Trigger on push to main branch

jobs:
  download_videos:
    runs-on: ubuntu-24.04

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Install dependencies (Tor + yt-dlp)
      - name: Install Tor and yt-dlp
        run: |
          sudo apt-get update
          sudo apt-get install tor curl
          sudo service tor start
          python3 -m pip install --upgrade yt-dlp

      # Step 3: Check Tor exit node IP
      - name: Check Tor exit node IP
        run: |
          echo "Checking Tor exit node IP..."
          curl --socks5 127.0.0.1:9050 https://check.torproject.org/api/ip

      # Step 4: Resolve YouTube via Tor
      - name: Resolve youtube.com via Tor
        run: |
          echo "Resolving youtube.com via Tor..."
          curl --socks5 127.0.0.1:9050 https://dns.google.com/resolve?name=www.youtube.com&type=A

      # Step 5: Save single video link
      - name: Save video link
        run: |
          echo "https://youtu.be/79-cYFBBslo?si=Ic35W4tDmkO97yxi" > search_results.txt

      # Step 6: Download video with retry mechanism
      - name: Download video
        run: |
          export http_proxy="http://127.0.0.1:8118"
          
          download_video() {
            local url="$1"
            local attempt=1
            local max_attempts=5
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt: Downloading $url"
              
              # Modify yt-dlp command to prefer H.264 (AVC) over AV1
              yt-dlp --proxy "socks5://127.0.0.1:9050" -f "bv[ext=mp4][vcodec*=avc1]+ba[ext=m4a]/best[ext=mp4][vcodec*=avc1]" --merge-output-format mp4 --continue --retries 5 "$url"
              
              if [ $? -eq 0 ]; then
                echo "Download successful: $url"
                return 0
              else
                echo "Download failed (attempt $attempt). Retrying..."
                attempt=$((attempt + 1))
                
                echo "Restarting Tor for new IP..."
                sudo service tor restart
                sleep 10
                
                echo "Checking new Tor exit node IP..."
                curl --socks5 127.0.0.1:9050 https://check.torproject.org/api/ip
              fi
            done
            echo "Failed to download $url after $max_attempts attempts."
            return 1
          }

          while IFS= read -r url; do
            download_video "$url"
          done < search_results.txt

      # Step 7: List downloaded files
      - name: List downloaded files
        run: ls -lh

      # Step 8: Detect faces in the downloaded video using OpenCV
      - name: Detect faces with OpenCV
        run: |
          python3 -m pip install opencv-python

          python3 <<EOF
          import cv2
          import os

          # Get the first downloaded video file
          for file in os.listdir():
              if file.endswith(".mp4"):
                  video_path = file
                  break
          else:
              raise FileNotFoundError("No MP4 video found.")

          face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")
          cap = cv2.VideoCapture(video_path)

          frame_count = 0
          detected_faces = 0

          while True:
              ret, frame = cap.read()
              if not ret or frame_count > 100:  # Process only the first 100 frames for speed
                  break

              gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
              faces = face_cascade.detectMultiScale(gray, 1.1, 4)

              if len(faces) > 0:
                  detected_faces += len(faces)
                  print(f"Frame {frame_count}: Detected {len(faces)} face(s)")

              frame_count += 1

          cap.release()
          print(f"Finished. Total frames checked: {frame_count}, Total faces detected: {detected_faces}")
          EOF
