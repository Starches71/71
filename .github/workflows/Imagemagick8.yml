name: ImageMagick Gradient Filter Directly to Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  image-overlay:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up ImageMagick and ffmpeg
      run: |
        sudo apt update
        sudo apt install -y imagemagick ffmpeg

    - name: Verify ImageMagick Installation
      run: |
        convert -version || { echo "convert not found!"; exit 1; }

    - name: List files in current directory (debugging)
      run: ls -l

    - name: Download Image from Repository
      run: cp "images (31).jpeg" base_image.jpeg

    - name: Verify that input image exists
      run: |
        if [ ! -f "base_image.jpeg" ]; then
          echo "base_image.jpeg not found!"
          exit 1
        else
          echo "base_image.jpeg found!"
        fi

    - name: Get Image Dimensions
      id: dimensions
      run: |
        width=$(convert base_image.jpeg -format "%w" info:)
        height=$(convert base_image.jpeg -format "%h" info:)
        echo "Width: $width, Height: $height"
        echo "IMAGE_WIDTH=$width" >> $GITHUB_ENV
        echo "IMAGE_HEIGHT=$height" >> $GITHUB_ENV

    - name: Apply Linear Gradient Filter Directly to Image
      run: |
        convert base_image.jpeg -size ${IMAGE_WIDTH}x${IMAGE_HEIGHT} gradient:white-black -compose Multiply -gravity center -composite output.png

    - name: Wrap Text and Add to Image using ffmpeg
      run: |
        text="Samsung phones can now flip into two because they are the best"
        font_size=10
        font="/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"
        
        # Use fmt to wrap text at a reasonable width (50 characters per line in this case)
        wrapped_text=$(echo "$text" | fmt -w 50)

        # Get width and height of the image to avoid overflow
        image_width=$IMAGE_WIDTH
        image_height=$IMAGE_HEIGHT

        # Calculate optimal font size based on image width and length of wrapped text
        wrapped_lines=$(echo "$wrapped_text" | wc -l)
        if [ "$wrapped_lines" -gt 3 ]; then
          font_size=20  # Reduce font size if there are more than 3 lines
        fi

        # Print wrapped text for debugging
        echo "Wrapped text:"
        echo "$wrapped_text"

        # Use ffmpeg to add wrapped text to the image
        ffmpeg -i output.png -vf "drawtext=text='$wrapped_text':fontfile=$font:fontsize=$font_size:fontcolor=white:x=(w-text_w)/2:y=(h-text_h)/2-10" -y output_with_text.png

    - name: Verify that output_with_text.png was created
      run: |
        if [ ! -f "output_with_text.png" ]; then
          echo "output_with_text.png not created!"
          exit 1
        else
          echo "output_with_text.png created successfully!"
        fi

    - name: List files in current directory after processing
      run: ls -l

    - name: Upload Processed Image as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: image-artifact
        path: output_with_text.png
