
import os
from icrawler.builtin import GoogleImageCrawler
import subprocess

# Step 1: Download 3 images
def download_images(search_term, output_dir="downloaded_images", num_images=3):
    os.makedirs(output_dir, exist_ok=True)
    crawler = GoogleImageCrawler(storage={"root_dir": output_dir})
    crawler.crawl(keyword=search_term, max_num=num_images)
    downloaded_files = [os.path.join(output_dir, f"{str(i+1).zfill(6)}.jpg") for i in range(num_images)]
    print("Images downloaded:", downloaded_files)
    return downloaded_files

# Step 2: Use FFmpeg's hstack filter to combine images
def combine_images_hstack(images, output_image="combined_image.jpg", final_width=1280, final_height=720):
    # Resize each image to fit within the target size (16:9 aspect ratio)
    resized_images = []
    for img in images:
        # Resize each image to fit into the 16:9 aspect ratio (cropped to center part)
        resized_image = f"resized_{os.path.basename(img)}"
        subprocess.run([
            'ffmpeg', '-i', img,
            '-vf', f"crop=in_w/2:in_h:in_w/4:0,scale={final_width//3}:{final_height}",
            resized_image
        ])
        resized_images.append(resized_image)

    # Combine the images horizontally using the hstack filter
    # This will join the images side by side, forming the desired diagonal pattern
    hstack_command = [
        'ffmpeg', 
        '-i', resized_images[0], 
        '-i', resized_images[1], 
        '-i', resized_images[2],
        '-filter_complex', '[0][1][2]hstack=inputs=3', 
        '-y', output_image
    ]
    
    subprocess.run(hstack_command)

    # Clean up temporary resized images
    for img in resized_images:
        os.remove(img)

    print("Combined image saved as:", output_image)
    return output_image

# Step 3: Generate a thumbnail with text and thick black borders
def generate_thumbnail(input_image, output_image, font_path="Nature Beauty Personal Use.ttf"):
    # Check if the input image exists
    if not os.path.exists(input_image):
        print("Input image not found! Aborting thumbnail generation.")
        return

    # Check if the font exists
    if not os.path.exists(font_path):
        print("Font file not found! Please provide a valid path to the font.")
        return

    # FFmpeg command to apply text, shadow, and vignette with thicker black borders
    ffmpeg_command = (
        f'ffmpeg -y -i "{input_image}" '
        f'-vf "format=yuv420p,'
        f'curves=preset=lighter,'
        f'drawtext=text=\'Best Hotels\':'
        f'fontfile=\'{font_path}\':'
        f'fontcolor=white:fontsize=150:borderw=8:bordercolor=black:'  # Thicker border with borderw=8
        f'x=(w-text_w)/2:y=(h-text_h)/2-100,'
        f'drawtext=text=\'Jeddah\':'
        f'fontfile=\'{font_path}\':'
        f'fontcolor=white:fontsize=150:borderw=8:bordercolor=black:'  # Thicker border with borderw=8
        f'x=(w-text_w)/2:y=(h-text_h)/2+100,'
        f'vignette=PI/4" '
        f'"{output_image}"'
    )

    print("Running FFmpeg command:", ffmpeg_command)
    result = os.system(ffmpeg_command)
    if result == 0:
        print("Thumbnail generated successfully:", output_image)
    else:
        print("Failed to generate thumbnail.")

if __name__ == "__main__":
    # Step 1: Download 3 images
    search_query = "Rosewood Jeddah hotel booking.com"
    downloaded_images = download_images(search_query)

    # Step 2: Combine the images using hstack filter
    combined_image = "combined_image.jpg"
    combine_images_hstack(downloaded_images, combined_image)

    # Step 3: Generate thumbnail with text and thicker black borders
    font_file = "Nature Beauty Personal Use.ttf"  # Font file in the main branch
    output_thumbnail = "thumbnail_with_text_border.jpg"
    generate_thumbnail(combined_image, output_thumbnail, font_path=font_file)
